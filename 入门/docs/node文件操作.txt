---------------node文件操作--------------------
###### mmys-zh
###### 2021/02/03


-----------node中使用文件描述符
    在与位于文件系统中的文件进行交互之前，需要先获取文件的描述符
    使用fs模块的open方法打开文件后会返回文件描述符
    --open()的第二个参数表示打开文件后的操作
        ~ "r"     打开文件用于读取
        ~ "r+"    打开文件用于读写
        ~ "w+"    打开文件用于读写，将流定位到文件的开头。如果文件不存在则创建文件
        ~ "a"     打开文件用于写入，将流定位到文件的末尾。如果文件不存在则创建文件
        ~ "a+"    打开文件用于读写，将流定位到文件的末尾。如果文件不存在则创建文件
        http://nodejs.cn/api/fs.html#fs_file_system_flags
    --示例：fs_desc.js

-------------文件状态
    使用fs.stat()可以检查文件带有的详细信息
    调用时传入文件的路径，一旦 Node.js 获得文件的详细信息，则会调用传入的回调函数，并带上两个参数：错误消息和文件属性
    文件的信息保存在属性变量中，一些属性的功能如下
        ~ .isDirectory()    文件是否是目录
        ~ .isDirectory()    文件是否是文件
        ~ .isSymbolicLink() 文件是否时符号链接
        ~ .size             文件的大小（以字节为单位）
    --示例：fs_stat.js

--------------文件路径
    使用path模块来操作获取文件路径信息
    --提取信息
        ~ .dirname()     获取文件的父文件夹
        ~ .basename()    获取文件名部分
            ` 可以通过指定第二参数来获得不带扩展名的文件名
        ~ .extname()     获取文件扩展名
    --使用路径
        ~ .join()       连接路径的两个或多个部分
        ~ .resolve()    获得相对路径的绝对路径计算
            ` 指定第二个参数，生成的路径信息按参数顺序叠加
            ` 第一个参数以斜杠开头，表示是绝对路径
        ~ .normalize()  当路径包含相对说明符（例如.或..）或双斜杠时，将尝试计算实际路径
    --示例：fs_path.js

----------------读取文件
    --方法
        ` 使用fs模块的readFile()读取文件
            向其传递文件路径，编码方式和将与文件数据一起调用的回调函数（以及错误）
            会把读取到的文件全部调用到内存里
        ` 使用流读取文件内容
    --示例
        fs_read.js

----------------写入文件
    --方法
        ` 使用fs模块的writeFile()写入文件
            可通过添加指定标志的参数更改默认写入方式
        ` 使用fs模块的appendFile()追加文件
            将内容追加到文件末尾
        ` 使用流写入文件内容
    --示例：
        fs_write.js

----------------使用文件夹
    fs模块提供技术支持
    --方法
        ~ .access()     检查文件夹是否存在以及 Node.js 是否具有访问权限
        ~ .mkdir()      创建新的文件夹
        ~ .readdir()    读取目录的内容
        ~ .rename()     重命名文件夹
            第一个参数是当前的路径，第二个参数是新的路径
        ~ .rmdir()      删除文件夹
            最好使用fs-extra模块进行删除带有内容的文件夹    https://www.npmjs.com/package/fs-extra
    --示例：
        fs_floder.js