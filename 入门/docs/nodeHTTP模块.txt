------------------node的http模块-----------------------
###### mmys-zh
###### 2021/02/03


--简介
    http模块是核心模块,无需安装,可以直接使用
--属性
    ` http.METHODS      列出所有支持的 HTTP 方法
        [require('http').METHODS]
    ` http.STATUS_CODES 列出所有的 HTTP 状态代码及其描述
        [require('http').STATUS_CODES]
    ` http.globalAgent  用于管理 HTTP 客户端连接的持久性和复用
        - 指向 Agent 对象的全局实例，该实例是 http.Agent 类的实例
--方法
    ` http.createServer()       返回 http.Server 类的新实例
    ` http.request()            发送 HTTP 请求到服务器，并创建 http.ClientRequest 类的实例
    ` http.get()                类似于 http.request()，但会自动地设置 HTTP 方法为 GET，并自动地调用 req.end()
--类
    ` http.Agent                管理 HTTP 客户端连接的持久性和复用，这是 Node.js HTTP 网络的关键组成部分
        该对象会确保对服务器的每个请求进行排队并且单个 socket 被复用
        维护一个 socket 池
    ` http.ClientRequest        当响应被接收时，则会使用响应（http.IncomingMessage 实例作为参数）来调用 response 事件
        返回的响应数据可以通过以下两种方式读取
            `调用 response.read() 方法
            `在 response 事件处理函数中，可以为 data 事件设置事件监听器，以便可以监听流入的数据
    ` http.Server               
        拥有服务器对象后，就可以访问其方法
            `close()    停止服务器不再接受新的连接
            `listen()   启动 HTTP 服务器并监听连接
    ` http.ServerResponse       由 http.Server 创建，并作为第二个参数传给它触发的 request 事件
        通常在代码中用作 res
        在事件处理函数中总是会调用的方法是 end()，它会关闭响应，当消息完成时则服务器可以将其发送给客户端。 必须在每个响应上调用它
        用于与 HTTP 消息头进行交互的方法
            `getHeaderNames()                   获取已设置的 HTTP 消息头名称的列表
            `getHeaders()                       获取已设置的 HTTP 消息头的副本
            `setHeader('headername', value)     设置 HTTP 消息头的值
            `getHeader('headername')            获取已设置的 HTTP 消息头
            `removeHeader('headername')         删除已设置的 HTTP 消息头
            `hasHeader('headername')            如果响应已设置该消息头，则返回 true
            `headersSent()                      如果消息头已被发送给客户端，则返回 true
        在处理消息头之后，可以通过调用 response.writeHead()（该方法接受 statusCode 作为第一个参数，可选的状态消息和消息头对象）将它们发送给客户端
        如果消息头还未被发送，则使用 response.writeHead() 会先发送消息头，其中包含在请求中已被设置的状态码和消息，可以通过设置 statusCode 和 statusMessage 属性的值进行编辑
        若要在响应正文中发送数据给客户端，则使用 write()。 它会发送缓冲的数据到 HTTP 响应流
    ` http.IncomingMessage      用来访问响应
        创建方式
            `http.Server，当监听 request 事件时
            `http.ClientRequest，当监听 response 事件时
        访问响应
            `使用 statusCode 和 statusMessage 方法来访问状态
            `使用 headers 方法或 rawHeaders 来访问消息头
            `使用 method 方法来访问 HTTP 方法
            `使用 httpVersion 方法来访问 HTTP 版本
            `使用 url 方法来访问 URL
            `使用 socket 方法来访问底层的 socket
        实现了可读流接口,数据可以使用流访问