----------------node事件循环---------------------
###### mmys-zh
###### 2021/02/02


事件循环是node的一个重要概念
--为什么重要
    因为它解释了Node.js如何异步并且具有无阻塞的I/O
    JavaScript代码是单线程的
--阻止事件循环的操作
    · 花费长时间才能将控制权返回到事件循环的JavaScript代码
    · 缺点：
        用户体验差
        程序健壮性低
--调用堆栈（队列）
    一个LIFO（后进先出）的堆栈
    -作0用：
    事件循环不断检查调用堆栈，以查看是否需要运行任何函数.【事件循环将找到的所有函数添加到调用堆栈中，并按顺序执行每个函数】
        每次迭代中的事件循环都会检查调用堆栈中是否有内容，并执行该事件，直到调用堆栈为空
--队列的重排操作
    --相关概念
        --消息队列
            用于存储一些待处理的事件
        --作业队列
            ES6引入的一种待处理队列
        --TIP
            循环将优先级赋予调用堆栈，它首先处理在调用堆栈中找到的所有内容，一旦其中没有任何内容，便开始处理消息队列中的内容
        --优先级
            调用堆栈 > 作业队列 > 消息队列
    --操作
        · Timers模块
            ` setTimeout()
            ` setInterval()
            ` setImmediate()    【和延迟为0的setTimeout()类似】
        · 作业队列
            ` Promises
            ` Async/await



---------process.nextTick()--------------------
###### mmys-zh
###### 2021/02/02


事件循环的重要部分
--简介
    · tick   事件循环一次的操作周期
    · 作用  
        将函数传递给process.nextTick()时，函数将会在本次tick后、下一次tick前执行函数
    · 与setTimeout(()=>{},0)的区别
        · setTimeout在下次tick结束时执行内部函数
        · process.nextTick()在下次tick开始时执行内部函数（还在本次tick范围内）
    · 使用场景
        需要确保下次tick前执行内部函数时，使用process.nextTick()